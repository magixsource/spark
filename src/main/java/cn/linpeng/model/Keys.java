/**
 * This class is generated by jOOQ
 */
package cn.linpeng.model;


import cn.linpeng.model.tables.App;
import cn.linpeng.model.tables.Category;
import cn.linpeng.model.tables.Comment;
import cn.linpeng.model.tables.Post;
import cn.linpeng.model.tables.Tag;
import cn.linpeng.model.tables.Theme;
import cn.linpeng.model.tables.User;
import cn.linpeng.model.tables.records.AppRecord;
import cn.linpeng.model.tables.records.CategoryRecord;
import cn.linpeng.model.tables.records.CommentRecord;
import cn.linpeng.model.tables.records.PostRecord;
import cn.linpeng.model.tables.records.TagRecord;
import cn.linpeng.model.tables.records.ThemeRecord;
import cn.linpeng.model.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>xcms</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<AppRecord, Integer> IDENTITY_APP = Identities0.IDENTITY_APP;
	public static final Identity<CategoryRecord, Integer> IDENTITY_CATEGORY = Identities0.IDENTITY_CATEGORY;
	public static final Identity<CommentRecord, Integer> IDENTITY_COMMENT = Identities0.IDENTITY_COMMENT;
	public static final Identity<PostRecord, Integer> IDENTITY_POST = Identities0.IDENTITY_POST;
	public static final Identity<TagRecord, Integer> IDENTITY_TAG = Identities0.IDENTITY_TAG;
	public static final Identity<ThemeRecord, Integer> IDENTITY_THEME = Identities0.IDENTITY_THEME;
	public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AppRecord> KEY_APP_PRIMARY = UniqueKeys0.KEY_APP_PRIMARY;
	public static final UniqueKey<AppRecord> KEY_APP_UNI_APP_DOMAIN = UniqueKeys0.KEY_APP_UNI_APP_DOMAIN;
	public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = UniqueKeys0.KEY_CATEGORY_PRIMARY;
	public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = UniqueKeys0.KEY_COMMENT_PRIMARY;
	public static final UniqueKey<PostRecord> KEY_POST_PRIMARY = UniqueKeys0.KEY_POST_PRIMARY;
	public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = UniqueKeys0.KEY_TAG_PRIMARY;
	public static final UniqueKey<TagRecord> KEY_TAG_NAME = UniqueKeys0.KEY_TAG_NAME;
	public static final UniqueKey<ThemeRecord> KEY_THEME_PRIMARY = UniqueKeys0.KEY_THEME_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
	public static final UniqueKey<UserRecord> KEY_USER_ACCOUNT = UniqueKeys0.KEY_USER_ACCOUNT;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<AppRecord, Integer> IDENTITY_APP = createIdentity(App.APP, App.APP.ID);
		public static Identity<CategoryRecord, Integer> IDENTITY_CATEGORY = createIdentity(Category.CATEGORY, Category.CATEGORY.ID);
		public static Identity<CommentRecord, Integer> IDENTITY_COMMENT = createIdentity(Comment.COMMENT, Comment.COMMENT.ID);
		public static Identity<PostRecord, Integer> IDENTITY_POST = createIdentity(Post.POST, Post.POST.ID);
		public static Identity<TagRecord, Integer> IDENTITY_TAG = createIdentity(Tag.TAG, Tag.TAG.ID);
		public static Identity<ThemeRecord, Integer> IDENTITY_THEME = createIdentity(Theme.THEME, Theme.THEME.ID);
		public static Identity<UserRecord, Integer> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<AppRecord> KEY_APP_PRIMARY = createUniqueKey(App.APP, App.APP.ID);
		public static final UniqueKey<AppRecord> KEY_APP_UNI_APP_DOMAIN = createUniqueKey(App.APP, App.APP.DOMAIN);
		public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = createUniqueKey(Category.CATEGORY, Category.CATEGORY.ID);
		public static final UniqueKey<CommentRecord> KEY_COMMENT_PRIMARY = createUniqueKey(Comment.COMMENT, Comment.COMMENT.ID);
		public static final UniqueKey<PostRecord> KEY_POST_PRIMARY = createUniqueKey(Post.POST, Post.POST.ID);
		public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = createUniqueKey(Tag.TAG, Tag.TAG.ID);
		public static final UniqueKey<TagRecord> KEY_TAG_NAME = createUniqueKey(Tag.TAG, Tag.TAG.NAME);
		public static final UniqueKey<ThemeRecord> KEY_THEME_PRIMARY = createUniqueKey(Theme.THEME, Theme.THEME.ID);
		public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, User.USER.ID);
		public static final UniqueKey<UserRecord> KEY_USER_ACCOUNT = createUniqueKey(User.USER, User.USER.ACCOUNT, User.USER.EMAIL);
	}
}
